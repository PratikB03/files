Build the image classification model (ECG Dataset)

import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow import keras
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix, classification_report
import matplotlib.pyplot as plt

# Load the ECG dataset
ecg_dataset = pd.read_csv("ecg-csv/ecg.csv")

# Preprocess the data
scaler = StandardScaler()
X = scaler.fit_transform(ecg_dataset.values)
y = X  # Autoencoder input and output are the same
X_train, X_test, _, _ = train_test_split(X, X, test_size=0.2, random_state=42)

# Build and train the Autoencoder model
input_dim = X_train.shape[1]

encoder = keras.Sequential([
    keras.layers.Input(shape=(input_dim,)),
    keras.layers.Dense(32 , activation='relu'),
    keras.layers.Dense(16 , activation='relu'),
    keras.layers.Dense(8, activation='relu')
])
​
decoder = keras.Sequential([
    keras.layers.Input(shape=(8,)),
    keras.layers.Dense(16 , activation='relu'),
    keras.layers.Dense(32 , activation='relu'),
    keras.layers.Dense(input_dim, activation='linear')
])
autoencoder = keras.Sequential([
    encoder,
    decoder
])

autoencoder.compile(optimizer='adam', loss='mean_squared_error')
autoencoder.fit(X_train, X_train, epochs=100, batch_size=32, shuffle=True)

# Detect anomalies
y_pred = autoencoder.predict(X_test)
mse = np.mean(np.power(X_test - y_pred, 2), axis=1)

# Define a threshold for anomaly detection
threshold = np.percentile(mse, 95)  # Adjust the percentile as needed

# Predict anomalies
anomalies = mse > threshold

# Calculate the number of anomalies
num_anomalies = np.sum(anomalies)
print(f"Number of Anomalies: {num_anomalies}")

# Plot the anomalies
plt.figure(figsize=(12, 6))
plt.plot(mse, marker='o', linestyle='', markersize=3, label='MSE')
plt.axhline(threshold, color='r', linestyle='--', label='Anomaly Threshold')
plt.xlabel('Sample Index')
plt.ylabel('MSE')
plt.title('Anomaly Detection Results')
plt.legend()
plt.show()

plt.figure(figsize=(12, 6))
plt.plot(X_test[0], label='Original ECG')
plt.plot(y_pred[0], label='Reconstructed ECG')
plt.xlabel('Time')
plt.ylabel('Amplitude')
plt.legend()
plt.title('Normal ECG')
plt.show()

# Evaluate the model
print("Confusion Matrix:")
print(confusion_matrix(anomalies, anomalies))
​
print("\nClassification Report:")
print(classification_report(anomalies, anomalies))